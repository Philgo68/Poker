@using Poker.Models;
@using Poker.Helpers;

@inject SvgCards svgCards

@{
    @if (Hand.GetType() == typeof(TaiwaneseHand))
    {
        var hand = (TaiwaneseHand)Hand;
        <div class="svg-stacked-hand">
            <PokerHandComponent Hand=@hand.TopHand ShowBlanks=@ShowBlanks />
            <PokerHandComponent Hand=@hand.MiddleHand ShowBlanks=@ShowBlanks />
            <PokerHandComponent Hand=@hand.BottomHand ShowBlanks=@ShowBlanks />
        </div>
    }
    else
    {
        int i = 0;
        var cards = ShowBlanks ? Hand.CardCount : Bits.BitCount(Hand.CardsMask);
        var klass = Hand.CommunityCards ? "community-cards" : "";
        <div class="svg-hand-wrapper cards-@(cards) @(klass) ">
            <div class="svg-hand-rotator cards-@(cards)">
                @foreach (var card in Hand.CardNumbers)
                {
                    <div class="svg-card-wrapper card-@(i++)">
                        @(svgCards.Faces[card])
                    </div>
                }
                @while (i < cards)
                {
                    <div class="svg-card-wrapper card-@(i++)">
                        @(svgCards.BackRed)
                    </div>
                }
            </div>
        </div>
    }
}

@code {
  [Parameter]
  public BaseHand Hand { get; set; }
  [Parameter]
  public bool ShowBlanks { get; set; }
}
