@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity;
@inject UserManager<Player> UserManager;

@{
    @if (Table != null)
    {
        <h1>Poker Table: @Table.Id</h1>
        var tHand = playersSeat?.Hand as TaiwaneseHand;
        if (tHand != null && !tHand.HandsLaidOut && tHand.CardsNeeded == 0 && !playersSeat.Player.Computer)
        {
            <div class="poker-table-holder">
                <div id="poker_table" class="poker-table handed-@(Table.TotalSeats) @(Table.DisplayPhase) @(Table.DisplayPhase)">
                    <div class="layout-location">
                        <PokerHandLayoutComponent Hand=@tHand Deck=@Table.SampleDeck />
                        <div class="col-auto my-auto"><PokerChipStackComponent Chips="@(playersSeat.Chips)" /></div>
                        <button class="btn btn-primary col-2 my-auto" @onclick="(e)=>LayoutSet(tHand)">Set Hand</button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="poker-table-holder">
                <div id="poker_table" class="poker-table handed-@(Table.TotalSeats) @(Table.DisplayPhase) @(Table.PhaseTitle.Classify())">
                    <div>@(Table.PhaseTitle)</div>
                    <div>@(Table.PhaseMessage)</div>
                    @foreach (var seat in Table.Seats)
                    {
                        <div id="player@((seat.Position + (Table.TotalSeats - FromSeat)) % Table.TotalSeats)">
                            <div class="seat-location">
                                <div class="seat">
                                    @if (seat.Hand != null)
                                    {
                                        <div class="cards">
                                            <PokerHandComponent Hand=@seat.Hand Deck=@Table.SampleDeck ShowBlanks=@true />
                                        </div>
                                        <div class="player-name">@(seat.Player.ScreenName)</div>
                                        <div class="chips">@(seat.Chips)</div>
                                    }
                                </div>
                            </div>
                            @if (seat.Button)
                            {
                                <div class="button-location"><div class="button"></div></div>
                            }
                            <div class="bet-location">
                                <div class="bet"><PokerChipStackComponent Chips=@seat.ChipsMoving /></div>
                            </div>
                        </div>
                    }

                    @if (Table.Board != null)
                    {
                        <div id="board-location">
                            <div id="board">
                                <PokerHandComponent Hand=@Table.Board Deck=@Table.SampleDeck ShowBlanks=@true />
                            </div>
                        </div>
                    }
                    <div id="current-pot-location">
                        <div id="current-pot"><PokerChipStackComponent Chips=@Table.Pot /></div>
                    </div>
                    <div id="total-pot-location">
                        <div id="total-pot">
                            <div class="d-flex mx-auto">Total Pot: @Table.Pot</div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }


}


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public Table Table { get; set; }
    [Parameter]
    public int FromSeat { get; set; }

    private Player player;
    private Seat playersSeat;

    protected async override Task OnParametersSetAsync()
    {
        if (Table != null)
        {
            var authState = await authenticationStateTask;
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                player = await UserManager.GetUserAsync(user);
                playersSeat = Table.PlayerSeat(player);
                if (playersSeat != null)
                    FromSeat = playersSeat.Position;
            }

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setTableSize");
    }

    private void LayoutSet(TaiwaneseHand tHand)
    {
        if (tHand != null)
        {
            tHand.CompleteManualLayout();
            StateHasChanged();
        }
    }
}
