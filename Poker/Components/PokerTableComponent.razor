@inject IJSRuntime JSRuntime

@{
    @if (Table != null)
    {
        var tSeat = Table.Seats.FirstOrDefault(s => s.Position == FromSeat);
        var tHand = tSeat?.Hand as TaiwaneseHand;
        if (tHand != null && !tHand.HandsLaidOut && tHand.CardsNeeded == 0 && !tSeat.Player.Computer)
        {
            <div class="poker-table-holder">
                <div id="poker_table" class="poker-table handed-@(Table.TotalSeats) @(Table.DisplayPhase) @(Table.PhaseTitle.Classify())">
                    <div class="layout-location">
                        <PokerHandLayoutComponent Hand=@tHand Deck=@Table.SampleDeck />
                        <div class="col-auto my-auto"><PokerChipStackComponent Chips="@(Table.Hero().Chips)" /></div>
                        <button class="btn btn-primary col-2 my-auto" @onclick="(e)=>LayoutSet(tHand)">Set Hand</button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="poker-table-holder">
                <div id="poker_table" class="poker-table handed-@(Table.TotalSeats) @(Table.DisplayPhase) @(Table.PhaseTitle.Classify())">
                    <div>@(Table.PhaseTitle)</div>
                    <div>@(Table.PhaseMessage)</div>
                    @foreach (var seat in Table.Seats)
                    {
                        <div id="player@((seat.Position + (Table.TotalSeats - FromSeat)) % Table.TotalSeats)">
                            <div class="seat-location">
                                <div class="seat">
                                    @if (seat.Hand != null)
                                    {
                                        <div class="cards">
                                            <PokerHandComponent Hand=@seat.Hand Deck=@Table.SampleDeck ShowBlanks=@true />
                                        </div>
                                        <div class="player-name">@(seat.Player.Name)</div>
                                        <div class="chips">@(seat.Chips)</div>
                                    }
                                </div>
                            </div>
                            @if (seat.Button)
                            {
                                <div class="button-location"><div class="button"></div></div>
                            }
                            <div class="bet-location">
                                <div class="bet"><PokerChipStackComponent Chips=@seat.ChipsMoving /></div>
                            </div>
                        </div>
                    }

                    @if (Table.Board != null)
                    {
                        <div id="board-location">
                            <div id="board">
                                <PokerHandComponent Hand=@Table.Board Deck=@Table.SampleDeck ShowBlanks=@true />
                            </div>
                        </div>
                    }
                    <div id="current-pot-location">
                        <div id="current-pot"><PokerChipStackComponent Chips=@Table.Pot /></div>
                    </div>
                    <div id="total-pot-location">
                        <div id="total-pot">
                            <div class="d-flex mx-auto">Total Pot: @Table.Pot</div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }


}


@code {
  [Parameter]
  public Table Table { get; set; }
  [Parameter]
  public int FromSeat { get; set; }

  private void LayoutSet(TaiwaneseHand tHand)
  {
      if (tHand != null)
      {
          tHand.CompleteManualLayout();
          StateHasChanged();
      }
  }
}
