@inject SvgCards svgCards

<div class="layout-cards">

    @{
        int i = 0;
        <div class="hand-area">

            @for (int c = 0; c < Hand.TopHand.CardCount; c++)
            {
                var card = i;
                <div @ondragstart="(e)=>Ondragstart(e, Cards[card])" ondragover="event.preventDefault();" @ondrop="(e)=>Ondrop(e, Cards[card])" draggable="true" class="draggable svg-card-wrapper card-0">
                    @(svgCards.Faces[Cards[card]])
                </div>
                i++;
            }
        </div>
    }
    @{
        <div class="w-100"></div>
        <div class="hand-area">
            @for (int c = 0; c < Hand.MiddleHand.CardCount; c++)
            {
                var card = i;
                <div @ondragstart="(e)=>Ondragstart(e, Cards[card])" ondragover="event.preventDefault();" @ondrop="(e)=>Ondrop(e, Cards[card])" draggable="true" class="draggable svg-card-wrapper card-0">
                    @(svgCards.Faces[Cards[card]])
                </div>
                i++;
            }
        </div>
    }
    @{
        <div class="w-100"></div>
        <div class="hand-area">
            @for (int c = 0; c < Hand.BottomHand.CardCount; c++)
            {
                var card = i;
                <div @ondragstart="(e)=>Ondragstart(e, Cards[card])" ondragover="event.preventDefault();" @ondrop="(e)=>Ondrop(e, Cards[card])" draggable="true" class="draggable svg-card-wrapper card-0">
                    @(svgCards.Faces[Cards[card]])
                </div>
                i++;
            }
        </div>
    }
</div>


@code {
    [Parameter]
    public TaiwaneseHand Hand { get; set; }
    [Parameter]
    public BaseDeck Deck { get; set; }

    private List<int> Cards;
    private int card_dragging;

    protected async override Task OnInitializedAsync()
    {
        Hand.StartManualLayout();

        Random rnd = new Random();
        Cards = new List<int>();

        foreach (var card in Deck.CardNumbers(Hand.TopHand.CardsMask).OrderBy(x => rnd.Next())) Cards.Add(card);
        foreach (var card in Deck.CardNumbers(Hand.MiddleHand.CardsMask).OrderBy(x => rnd.Next())) Cards.Add(card);
        foreach (var card in Deck.CardNumbers(Hand.BottomHand.CardsMask).OrderBy(x => rnd.Next())) Cards.Add(card);
    }

    private void Ondragstart(DragEventArgs e, int card)
    {
        // Start Dragging the card
        card_dragging = card;
    }

    private void Ondrop(DragEventArgs e, int card)
    {
        // Swap this Card with the card being dragged
        var card1 = Cards.IndexOf(card_dragging);
        var card2 = Cards.IndexOf(card);

        (Cards[card1], Cards[card2]) = (Cards[card2], Cards[card1]);

        // Reset the Hands
        Hand.TopHand.CardsMask = 0UL;
        Hand.MiddleHand.CardsMask = 0UL;
        Hand.BottomHand.CardsMask = 0UL;

        int i = 0;
        for (int c = 0; c < Hand.TopHand.CardCount; c++) Hand.TopHand.AddCard(Cards[i++]);
        for (int c = 0; c < Hand.MiddleHand.CardCount; c++) Hand.MiddleHand.AddCard(Cards[i++]);
        for (int c = 0; c < Hand.BottomHand.CardCount; c++) Hand.BottomHand.AddCard(Cards[i++]);
    }

}
