@page "/"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;

@inject Poker.Data.PokerDbContext PokerDbContext
@inject UserManager<Player> UserManager
@inject IJSRuntime JSRuntime
@inject Poker.Helpers.Dealers Dealers
@inject Poker.Helpers.Players Players

<h1>Poker Lobby</h1>
<hr />

<AuthorizeView>
    <Authorized>
        <h1>Hello, @Player.ScreenName!</h1>
        <div>Current Bankroll: @Player.Bankroll</div>
        <br />
        <h2>Your Tables</h2>
        <BSDataTable Items="Tables[true]" Context="table" IsResponsive="true" IsStriped="true">
            <HeaderTemplate>
                <tr>
                    <th scope="col">Game</th>
                    <th scope="col">Stakes</th>
                    <th scope="col">Players</th>
                    <th scope="col">Your Chips</th>
                </tr>
            </HeaderTemplate>
            <NoDataTemplate>
                <td colspan="4">No Data Available</td>
            </NoDataTemplate>
            <ItemTemplate>
                <td scope="row"><a href="PokerTable/@(table.Id)">@table.Game.Name</a></td>
                <td>1 Chip Per Point</td>
                <td>@table.Seats.Count</td>
                <td>@table.PlayerSeat(Player).Chips</td>
            </ItemTemplate>
        </BSDataTable>
        <br />
        <h2>Other Tables</h2>
        <BSDataTable Items="Tables[false]" Context="table" IsResponsive="true" IsStriped="true">
            <HeaderTemplate>
                <tr>
                    <th scope="col">Game</th>
                    <th scope="col">Stakes</th>
                    <th scope="col">Players</th>
                    <th scope="col"></th>
                </tr>
            </HeaderTemplate>
            <NoDataTemplate>
                <td colspan="4">No Data Available</td>
            </NoDataTemplate>
            <ItemTemplate>
                <td scope="row"><a href="#" @onclick="@(() => JoinTable(table.Id))">@table.Game.Name</a></td>
                <td>1 Chip Per Point</td>
                <td>@table.Seats.Count</td>
                <td><a href="PokerTable/@(table.Id)">View</a></td>
            </ItemTemplate>
        </BSDataTable>
        <br />
        <h2>New Table</h2>
        <form @onsubmit="NewTable">
            <div class="col-11">
                <div class="form-group row align-items-center">
                    <label for="chips" class="col-2 h2 col-form-label">Chips to take:</label>
                    <input class="form-control col-4" name="chips" @bind="chips" />
                </div>
            </div>
            <div class="col-11">
                <div class="form-group row align-items-center">
                    <div class="offest-2 col-4">
                        <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Taiwanese")">Taiwanese Poker</button>
                    </div>
                </div>
            </div>
        </form>
    </Authorized>
    <NotAuthorized>
        <h1>You must login to enter the Poker Lobby</h1>
        <a class="btn btn-primary mr-2" href="Identity/Account/Register">Register</a>
        <a class="btn btn-primary mr-2" href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
  [CascadingParameter]
  private Task<AuthenticationState> authenticationStateTask { get; set; }

  private Player Player = null;
  private Dictionary<bool, List<Table>> Tables = null;

  private int chips;
  private string button;

  protected async override Task OnParametersSetAsync()
  {
      var authState = await authenticationStateTask;
      var user = authState.User;
      if (user.Identity.IsAuthenticated)
      {
          //Player = await UserManager.GetUserAsync(user);
          Player = Players.SingularPlayer(user.FindFirst(ClaimTypes.NameIdentifier).Value);
          //Player.StateHasChangedDelegate += MyChangeHandler;
          if (Player == null)
          {
              //AuthenticationManager.SignOut(DefaultAuthenticationTypes.ApplicationCookie, DefaultAuthenticationTypes.ExternalCookie);
              //Session.Abandon();
              // Second we clear the principal to ensure the user does not retain any authentication
              //HttpContext.User = new GenericPrincipal(new GenericIdentity(string.Empty), null);
              //await _signManager.SignOutAsync();
          }
          else
          {
              FindTables();
          }
      }
      await base.OnParametersSetAsync();
  }

  protected async void FindTables()
  {
      var tables = await PokerDbContext.Tables
              .Include(table => table.Seats)
                  .ToListAsync();
      Tables = tables.GroupBy(t => t.Seats.Any(s => s.PlayerId == Player?.Id)).ToDictionary(k => k.Key, l => l.ToList());
      // Make sure true and false values exist
      if (!Tables.ContainsKey(true))
      {
          Tables.Add(true, new List<Table>());
      }
      if (!Tables.ContainsKey(false))
      {
          Tables.Add(false, new List<Table>());
      }
  }


  async Task NewTable()
  {
      switch (button)
      {
          case "Single":
              await StartTable(new OneCardHoldem());
              break;
          case "Texas":
              await StartTable(new TexasHoldem(), 6);
              break;
          case "Omaha":
              await StartTable(new Omaha(), 6);
              break;
          case "Taiwanese":
              await StartTable(new Taiwanese(), 6);
              break;
      };
      button = null;
  }

  async Task JoinTable(Guid tableID)
  {
      var dealer = Dealers.DealerForTable(tableID);
      if (dealer != null)
      {
          chips = Math.Min(chips, Player.Bankroll);
          Player.Bankroll -= chips;
          dealer.OccupySeat(Player, chips);
          await PokerDbContext.SaveChangesAsync();
          MyChangeHandler();
          dealer.Table.StateHasChangedDelegate += MyChangeHandler;
          await JSRuntime.InvokeAsync<object>("open", $"PokerTable/{tableID}", "_blank");
      }
  }

  protected async Task StartTable(BaseGame game, int seats = 9)
  {
      var table = new Table(game, seats);
      PokerDbContext.Add<Table>(table);
      await PokerDbContext.SaveChangesAsync();

      await JoinTable(table.Id);
  }


  private async void MyChangeHandler()
  {
      FindTables();
      await InvokeAsync(() => StateHasChanged());
  }

}
