@page "/"
@using Microsoft.AspNetCore.Identity;

@inject Poker.Data.PokerDbContext PokerDbContext
@inject UserManager<Player> UserManager
@inject IJSRuntime JSRuntime

<h1>Poker Lobby</h1>
<hr />

<AuthorizeView>
    <Authorized>
        <h1>Hello, @Player.ScreenName!</h1>
        <div>Current Bankroll: @Player.Bankroll</div>
        <br />
        <h2>Your Tables</h2>
        <BSDataTable Items="Tables[true]" Context="table" IsResponsive="true" IsStriped="true">
            <HeaderTemplate>
                <tr>
                    <th scope="col">Game</th>
                    <th scope="col">Stakes</th>
                    <th scope="col">Players</th>
                    <th scope="col">Your Chips</th>
                </tr>
            </HeaderTemplate>
            <NoDataTemplate>
                <td colspan="4">No Data Available</td>
            </NoDataTemplate>
            <ItemTemplate>
                <td scope="row"><a href="PokerTable/@(table.Id)">@table.Game.Name</a></td>
                <td>1 Chip Per Point</td>
                <td>@table.Seats.Count</td>
                <td>@table.PlayerSeat(Player).Chips</td>
            </ItemTemplate>
        </BSDataTable>
        <br />
        <h2>Other Tables</h2>
        <BSDataTable Items="Tables[false]" Context="table" IsResponsive="true" IsStriped="true">
            <HeaderTemplate>
                <tr>
                    <th scope="col">Game</th>
                    <th scope="col">Stakes</th>
                    <th scope="col">Players</th>
                    <th scope="col"></th>
                </tr>
            </HeaderTemplate>
            <NoDataTemplate>
                <td colspan="4">No Data Available</td>
            </NoDataTemplate>
            <ItemTemplate>
                <td scope="row"><a href="#" @onclick="@(() => JoinTable(table.Id))">@table.Game.Name</a></td>
                <td>1 Chip Per Point</td>
                <td>@table.Seats.Count</td>
                <td><a href="PokerTable/@(table.Id)">View</a></td>
            </ItemTemplate>
        </BSDataTable>
        <br />
        <h2>New Table</h2>
        <form @onsubmit="NewTable">
            <div class="col-11">
                <div class="form-group row align-items-center">
                    <label for="chips" class="col-2 h2 col-form-label">Chips to take:</label>
                    <input class="form-control col-4" name="chips" @bind="chips" />
                </div>
            </div>
            <div class="col-11">
                <div class="form-group row align-items-center">
                    <div class="offest-2 col-4">
                        <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Taiwanese")">Taiwanese Poker</button>
                    </div>
                </div>
            </div>
        </form>
    </Authorized>
    <NotAuthorized>
        <h1>You must login to enter the Poker Lobby</h1>
        <a class="btn btn-primary mr-2" href="Identity/Account/Register">Register</a>
        <a class="btn btn-primary mr-2" href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private Player Player = null;
    private Dictionary<bool, List<Table>> Tables = null;

    private int chips;
    private string button;

    protected async override Task OnParametersSetAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            Player = await UserManager.GetUserAsync(user);
            FindTables();
        }
    }

    protected async void FindTables()
    {
        var tables = await PokerDbContext.Tables
                .Include(table => table.Seats)
                    .ThenInclude(s => s.Player)
                    .ToListAsync();
        Tables = tables.GroupBy(t => t.Seats.Any(s => s.Player.Id == Player?.Id)).ToDictionary(k => k.Key, l => l.ToList());
        // Make sure true and false values exist
        if (!Tables.ContainsKey(true))
        {
            Tables.Add(true, new List<Table>());
        }
        if (!Tables.ContainsKey(false))
        {
            Tables.Add(false, new List<Table>());
        }
    }


    async Task NewTable()
    {
        Guid? tableID = null;
        switch (button)
        {
            case "Single":
                tableID = await StartTable(new OneCardHoldem());
                break;
            case "Texas":
                tableID = await StartTable(new TexasHoldem(), 6);
                break;
            case "Omaha":
                tableID = await StartTable(new Omaha(), 6);
                break;
            case "Taiwanese":
                tableID = await StartTable(new Taiwanese(), 6);
                break;
        };
        button = null;
        if (tableID != null)
            await JSRuntime.InvokeAsync<object>("open", $"PokerTable/{tableID.Value}", "_blank");
    }

    async Task JoinTable(Guid tableID)
    {
        var table = await PokerDbContext.Tables.FindAsync(tableID);
        if (table != null)
        {
            chips = Math.Min(chips, Player.Bankroll);
            Player.Bankroll = Player.Bankroll - chips;
            table.OccupySeat(Player, chips);
            await JSRuntime.InvokeAsync<object>("open", $"PokerTable/{table.Id}", "_blank");
        }
    }

    protected async Task<Guid> StartTable(BaseGame game, int seats = 9)
    {
        var table = new Table(game, seats);
        PokerDbContext.Add<Table>(table);

        chips = Math.Min(chips, Player.Bankroll);
        Player.Bankroll = Player.Bankroll - chips;
        table.OccupySeat(Player, chips);

        await PokerDbContext.SaveChangesAsync();
        MyChangeHandler();

        return table.Id;
    }


    private async void MyChangeHandler()
    {
        FindTables();
        await InvokeAsync(() => StateHasChanged());
    }

}
