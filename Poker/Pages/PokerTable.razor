@page "/pokertable"

@using System.Diagnostics;
@using System.Runtime.Serialization;
@using System.Runtime.Serialization.Formatters.Binary;
@using System.IO;

<h1>Poker Table</h1>

<form @onsubmit="Submit">
    <div class="col-11">
        <div class="form-group row align-items-center">
            <label for="hand-1" class="col-2 h2 col-form-label">Hero:</label>
            <input class="form-control col-4" name="hand-1" @bind="hand_1" />
            <div class="offest-2 col-4">
                <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Single")">One Card Hold'em</button>
            </div>
        </div>
        <div class="form-group row align-items-center">
            <label for="hand-2" class="col-2 h2 col-form-label">Opponent(s):</label>
            <input class="form-control col-4" name="hand-2" @bind="hand_2" />
            <div class="offest-2 col-4">
                <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Texas")">Texas Hold'em</button>
            </div>
        </div>
        <div class="form-group row align-items-center">
            <label for="card-cnt" class="col-2 h2 col-form-label">Opponent Cnt:</label>
            <input class="form-control col-4" name="card-cnt" type="number" @bind="hand_cnt" />
            <div class="offest-2 col-4">
                <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Omaha")">Omaha Hi</button>
            </div>
        </div>
        <div class="form-group row align-items-center">
            <label for="board" class="col-2 h2 col-form-label">Board:</label>
            <input class="form-control col-4" name="board" @bind="board_string" />
            <div class="offest-2 col-4">
                <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Taiwanese")">Taiwanese Poker</button>
            </div>
        </div>
        <div class="form-group row align-items-center">
            <label for="seconds" class="col-2 h2 col-form-label">Seconds:</label>
            <input class="form-control col-1" name="seconds" @bind="seconds" />
            <label for="iterations" class="col-2 h2 col-form-label">Iterations (MM):</label>
            <input class="form-control col-1" name="iterations" @bind="iterations" />
        </div>
        <div class="form-group row align-items-center">
            <div class="col-4">
                <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Deal")">Test Dealer</button>
            </div>
            <div class="col-4">
                <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Test")">Test Something</button>
            </div>
        </div>
    </div>
</form>
<hr />

<PokerTableComponent Table=@table />

@if (show_chips)
{
    // 1  5  25 100 500 1000 5000 10000
    <div class="d-flex mx-auto">
        @{
            var chips = hand_cnt.Value;
            for (var offset = 0.0; offset < 90.0; offset += 11.25)
            {
                <div class="my-auto"><PokerChipsComponent Chips="@(chips)" Klass="large" Offset="@(offset)" /></div>
            }
        }
    </div>
    <div id="screenshotPreviews"></div>
}

@code {
    string hand_1, hand_2, board_string, button;
    int? hand_cnt;
    BaseHand hero = null;
    List<BaseHand> opponents = new List<BaseHand>();
    BaseHand board = null;
    List<BaseHand> displayHands = new List<BaseHand>();
    BaseTable table = null;
    BaseDeck deck = null;
    double seconds;
    long iterations;
    bool show_chips = false;

    private string result, result2;
    private static Random _global_random = new Random();

    protected async override Task OnInitializedAsync()
    {
        hand_1 = "As6d";
        hand_2 = "Ac3d;Ah4d";
        hand_cnt = 3;
        board_string = "";

        //hand_1 = "jh5h5dah4h3s2s";
        //hand_2 = "7d8s6sacqd3c2d;5s9s9htd8c7c2c;jckhkdad6h3d2h";
        //board_string = "kcqsqhjd5c";
    }

    private async void MyChangeHandler()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    async Task Submit()
    {
        result = "Loading...";
        result2 = null;

        table = null;
        deck = null;

        hero = null;
        board = null;
        opponents.Clear();
        displayHands.Clear();

        StateHasChanged();
        await Task.Delay(1);

        switch (button)
        {
            case "Single":
                result = await Task.FromResult(DemoTable(new OneCardHoldem()));
                break;
            case "Texas":
                result = await Task.FromResult(DemoTable(new TexasHoldem(), 6));
                break;
            case "Omaha":
                result = await Task.FromResult(DemoTable(new Omaha(), 6));
                break;
            case "Taiwanese":
                result = await Task.FromResult(DemoTable(new Taiwanese(), 6));
                break;
            case "Deal":
                (result, result2) = await Task.FromResult(StartDeckDeal());
                break;
            case "Test":
                result = await Task.FromResult(TestSomething());
                break;
            default:
                result = $"Unknown Button: {button}";
                break;
        };
        button = null;
    }

    protected string DemoTable(BaseGame game, int seats = 9)
    {
        try
        {
            table = new BaseTable(game, seats);
            table.StateHasChangedDelegate += MyChangeHandler;

            hand_cnt = Math.Min(seats - 1, (hand_cnt ?? 1));

            hero = game.GetHand();
            hero.SetCards(hand_1);

            var heroSeat = table.OccupySeat(hero, new BasePlayer() { Name = "Hero", Computer = false });

            var setOpp = 0;
            foreach (var oh in (hand_2 ?? "").Split(";"))
            {
                var oppHand = game.GetHand();
                oppHand.SetCards(oh);
                table.OccupySeat(oppHand, null);
                setOpp++;
            }

            hand_cnt = Math.Max(hand_cnt ?? 1, setOpp);
            for (var i = setOpp; i < hand_cnt; i++)
            {
                table.OccupySeat(game.GetHand(), null);
                setOpp++;
            }

            board = game.GetBoard();
            board.SetCards(board_string);
            table.SetBoard(board);

            table.Store();

            if (true && (game.GetType() == typeof(Taiwanese)))
            {
                table.TransitionToNextPhase();
            }
            else
            {
                if (game.GetType() == typeof(Taiwanese))
                {
                    table.CompleteCards();
                    table.LayoutHands(true);
                }

                table.pot = _global_random.Next(20000);
                foreach (var s in table.AllSeats())
                {
                    if (s != null)
                        s.ChipsMoving = _global_random.Next(750);
                }

                StateHasChanged();
            }

            return $"Table Setup.";
        }
        catch (ArgumentException e)
        {
            return e.Message;
        }

    }

    protected (string, string) StartTaiwanese()
    {
        long cnt = 0;
        var duration = 5.0;

        //AhKsQsQhTh9h5s
        //AsAhAcQhQc7s2d
        //AsAhAcKhQsTs3c
        // Tc7h7c6s6c2h2c  vs AcQhTsTd9h5s4s
        // ThAsAhKsKh7d6d  vs Td8h8dJs7s4d3s     Th / As, Ah / Ks, Kh, 7d, 6d  and  Td / 8h, 8d / Js, 7s, 4d, 3s

        //5d / 8s, 8h / As, 7c, 6c, 2d  vs Ts / 7s, 6d / Ks, 3s, 3d, 3c  on adqdjd9s9d


        hero = new TaiwaneseHand();
        TaiwaneseHand tHero = (TaiwaneseHand)hero;
        tHero.SetCards(hand_1);

        var opp = new TaiwaneseHand();
        opp.SetCards(hand_2);
        opponents.Add(opp);

        // Create deck the initial cards "dealt"
        var deck = new StandardDeck(tHero.CardsMask | opp.CardsMask);

        // Fill in the blanks in the hand(s)
        tHero.CompleteCards(deck, _global_random);
        opp.CompleteCards(deck, _global_random);

        board = new BaseHand(board_string, 5);
        //board.CompleteCards(deck, _global_random);
        board.CommunityCards = true;

        // Layout the hands
        cnt += tHero.LayoutHand(duration / 3);
        cnt += opp.LayoutHand(duration / 3);

        string result = $"{tHero.CardDescriptions} and {opp.CardDescriptions} over {cnt / 2:n0} boards.";
        string result2 = "";

        cnt = 19; // hero.PlayAgainst(opponents.ToArray(), board, duration / 3 );
        result2 = $"{hero.Percent}% against {opponents.Count} opponents over {cnt:n0} trials.";

        // To play once
        //cnt = hero.PlayAgainst(opponents.ToArray(), board);
        //result2 = $"Hero {cnt} points.";


        return (result, result2);
    }

    protected (string, string) StartDeckDeal()
    {
        var deck = new StandardDeck();
        var boardMask1 = 0x0UL;
        var boardMask2 = 0x0UL;
        ulong[] hands = new ulong[6];

        var rand = _global_random;
        var start = Stopwatch.GetTimestamp();

        for (int i = 0; i < 1_000_000; i++)
        {
            deck.Reset();

            for (int j = 0; j < hand_cnt; j++)
            {
                hands[j] = deck.DealCards(7, rand);
            }
            boardMask1 = deck.DealCards(5, rand);
            boardMask2 = deck.DealCards(5, rand);
        }
        var end = 1000.0 * (Stopwatch.GetTimestamp() - start) / Stopwatch.Frequency;

        result = hand_cnt == 6 ? $"{end}ms full table double board Taiwanese 1 million times." : $"{end}ms to deal {hand_cnt + 2} different hands 1 million times.";
        result2 = "Last result:<br>";

        for (int j = 0; j < hand_cnt; j++)
        {
            result2 += deck.CardDescriptions(hands[j]) + "<br>";
            displayHands.Add(new BaseHand(hands[j], 7));
        }

        var board1 = new BaseHand(boardMask1, 5);
        var board2 = new BaseHand(boardMask2, 5);

        result2 += "Board1: " + board1.CardDescriptions + "<br>";
        result2 += "Board2: " + board2.CardDescriptions + "<br>";
        //displayHands.Add(board1);
        //displayHands.Add(board2);
        result2 += Poker.CFHandEvaluator.Hand.DescriptionFromMask(Poker.CFHandEvaluator.Hand.ParseHand(hand_1 ?? "") | boardMask1) + "<br>";
        result2 += "Dealt Cards: " + deck.CardDescriptions(deck.DealtCards) + "<br>";

        return (result, result2);
    }

    protected string TestSomething()
    {
        try
        {
            List<BaseTable> tables = DbAccess.Load<BaseTable>();
            table = tables.FirstOrDefault();

            if (table == null)
            {
                return DemoTable(new Taiwanese(), 6);
            }
            else

            {
                table.StateHasChangedDelegate += MyChangeHandler;
                table.TransitionToNextPhase();

                return "Table Running";
            }
        }
        catch (Exception e)
        {
            return e.Message;
        }

    }
}
