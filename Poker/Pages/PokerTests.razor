@page "/pokertests"

@inject SvgCards svgCards

@using Poker.CFHandEvaluator;
@using Poker.Models;
@using Poker.Helpers;
@using System.Diagnostics;

<h1>Poker Tests</h1>

<form @onsubmit="Submit">
    <div class="col-11">
        <div class="form-group row align-items-center">
            <label for="hand-1" class="col-2 h2 col-form-label">Hero:</label>
            <input class="form-control col-4" name="hand-1" @bind="hand_1" />
            <div class="offest-2 col-4">
                <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Single")">One Card Hand</button>
            </div>
        </div>
        <div class="form-group row align-items-center">
            <label for="hand-2" class="col-2 h2 col-form-label">Opponent(s):</label>
            <input class="form-control col-4" name="hand-2" @bind="hand_2" />
            <div class="offest-2 col-4">
                <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Texas")">Texas Hold'em</button>
            </div>
        </div>
        <div class="form-group row align-items-center">
            <label for="card-cnt" class="col-2 h2 col-form-label">Hand Cnt:</label>
            <input class="form-control col-4" name="card-cnt" type="number" @bind="hand_cnt" />
            <div class="offest-2 col-4">
                <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Omaha")">Omaha Hi</button>
            </div>
        </div>
        <div class="form-group row align-items-center">
            <label for="board" class="col-2 h2 col-form-label">Board:</label>
            <input class="form-control col-4" name="board" @bind="board_string" />
            <div class="offest-2 col-4">
                <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Taiwanese")">Taiwanese Poker</button>
            </div>
        </div>
        <div class="form-group row align-items-center">
            <div class="col-4">
                <button type="submit" class="btn btn-primary col" @onclick="@(() => button = "Deal")">Test Dealer</button>
            </div>
        </div>
    </div>
</form>
<hr />

<div class="row align-items-center">
    @if (hero != null && board != null)
    {
        <PokerHandComponent Hand=@hero ShowBlanks=@true />
        <div class="d-inline-block m-2">vs.</div>
        @foreach (var hand in opponents)
        {
            <PokerHandComponent Hand=@hand ShowBlanks=@true />
        }
        <div class="d-inline-block m-2">on</div>
        <PokerHandComponent Hand=@board ShowBlanks=@true />
    }


    @foreach (var hand in displayHands)
    {
        <PokerHandComponent Hand=@hand ShowBlanks=@true />
    }
</div>

<hr />

<table class="table">
    <thead>
        <tr>
            <th>Results</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@((MarkupString)result)</td>
        </tr>
        <tr>
            <td>@((MarkupString)result2)</td>
        </tr>
    </tbody>
</table>


@code {
  string hand_1, hand_2, board_string, button;
  int? hand_cnt;
  BaseHand hero;
  List<BaseHand> opponents = new List<BaseHand>();
  BaseHand board;
  List<BaseHand> displayHands = new List<BaseHand>();

  private string result, result2;
  private static Random _global_random = new Random();

  protected async override Task OnInitializedAsync()
  {
      hand_1 = "As6d";
      hand_cnt = 2;
      await svgCards.LoadCardsAsync();
  }


  async Task Submit()
  {
      result = "Loading...";
      result2 = null;

      hero = null;
      board = null;
      opponents.Clear();
      displayHands.Clear();

      switch (button)
      {
          case "Single":
              result = await Task.FromResult(PlayItOut(typeof(OneCardHand)));
              break;
          case "Texas":
              result = await Task.FromResult(PlayItOut(typeof(HoldemHand)));
              break;
          case "Omaha":
              result = await Task.FromResult(PlayItOut(typeof(OmahaHand)));
              break;
          case "Taiwanese":
              (result, result2) = await Task.FromResult(StartTaiwanese());
              break;
          case "Deal":
              (result, result2) = await Task.FromResult(StartDeckDeal());
              break;
          default:
              result = $"Unknown Button: {button}";
              break;
      };
      button = null;
  }

  protected string PlayItOut(Type handType)
  {
      try
      {
          // code to compare against original library in results and speed
          //var start = Stopwatch.GetTimestamp();
          //var one = $"{(Hand.WinOdds(hand_1 ?? "", board_string ?? "", hand_cnt ?? 1) * 100.0).ToString()}%";
          //var end = 1000.0 * (Stopwatch.GetTimestamp() - start) / Stopwatch.Frequency;
          //one += $"  {end}ms";

          hero = (BaseHand)Activator.CreateInstance(handType);
          hero.SetCards(hand_1);

          foreach (var oh in (hand_2 ?? "").Split(","))
          {
              var opp = (BaseHand)Activator.CreateInstance(handType);
              opp.SetCards(oh);
              opponents.Add(opp);
          }

          hand_cnt = Math.Max(hand_cnt ?? 1, opponents.Count);
          for (var i = opponents.Count; i < hand_cnt; i++) { opponents.Add((BaseHand)Activator.CreateInstance(handType)); }

          board = new FiveCardHand(board_string);
          board.CommunityCards = true;

          long cnt = hero.PlayAgainst(opponents.ToArray(), board, 5);

          return $"{hero.Percent}% against {opponents.Count} opponents over {cnt} trials.<br>Wins: {hero.Wins:n0}  Loses: {hero.Loses:n0}  Ties: {hero.Ties:n0}.";
      }
      catch (ArgumentException e)
      {
          return e.Message;
      }

  }

  protected string HandDescriptionSample()
  {
      // initialize board
      string board = "2d kh qh 3h qc";
      // Create a hand with AKs plus board
      Hand h1 = new Hand("ad kd", board);
      // Create a hand with 23 unsuited plus board
      Hand h2 = new Hand("2h 3d", board);

      // Find stronger hand and print results
      if (h1 > h2)
      {
          return $"{h1.Description} is better than {h2.Description}.";
      }
      else
      {
          return $"{h1.Description} is worse or equal to {h2.Description}.";
      }
  }

  protected (string, string) StartTaiwanese()
  {
      long cnt = 0;
      var duration = 5.0;

      //AhKsQsQhTh9h5s
      //AsAhAcQhQc7s2d
      //AsAhAcKhQsTs3c
      // Tc7h7c6s6c2h2c  vs AcQhTsTd9h5s4s
      // ThAsAhKsKh7d6d  vs Td8h8dJs7s4d3s     Th / As, Ah / Ks, Kh, 7d, 6d  and  Td / 8h, 8d / Js, 7s, 4d, 3s

      //5d / 8s, 8h / As, 7c, 6c, 2d  vs Ts / 7s, 6d / Ks, 3s, 3d, 3c  on adqdjd9s9d


     hero = new TaiwaneseHand();
      TaiwaneseHand tHero = (TaiwaneseHand)hero;
      tHero.SetCards(hand_1);

      var opp = new TaiwaneseHand();
      opp.SetCards(hand_2);
      opponents.Add(opp);

      // Create deck the initial cards "dealt"
      var deck = new StandardDeck(tHero.CardsMask | opp.CardsMask);

      // Fill in the blanks in the hand(s)
      tHero.CompleteCards(deck, _global_random);
      opp.CompleteCards(deck, _global_random);

      board = new FiveCardHand(board_string);
      //board.CompleteCards(deck, _global_random);
      board.CommunityCards = true;

      // Layout the hands
      cnt += tHero.LayoutHand(duration / 3);
      cnt += opp.LayoutHand(duration / 3);

      string result = $"{tHero.CardDescriptions} and {opp.CardDescriptions} over {cnt/2:n0} boards.";
      string result2 = "";

      cnt = hero.PlayAgainst(opponents.ToArray(), board, duration / 3 );
      result2 = $"{hero.Percent}% against {opponents.Count} opponents over {cnt:n0} trials.";

      // To play once
      //cnt = hero.PlayAgainst(opponents.ToArray(), board);
      //result2 = $"Hero {cnt} points.";


      return (result, result2);
  }

  protected (string, string) StartDeckDeal()
  {
      var deck = new StandardDeck();
      var boardMask1 = 0x0UL;
      var boardMask2 = 0x0UL;
      ulong[] hands = new ulong[6];

      var rand = _global_random;
      var start = Stopwatch.GetTimestamp();

      for (int i = 0; i < 1_000_000; i++)
      {
          deck.Reset();

          for (int j = 0; j < hand_cnt; j++)
          {
              hands[j] = deck.DealCards(7, rand);
          }
          boardMask1 = deck.DealCards(5, rand);
          boardMask2 = deck.DealCards(5, rand);
      }
      var end = 1000.0 * (Stopwatch.GetTimestamp() - start) / Stopwatch.Frequency;

      result = hand_cnt == 6 ? $"{end}ms full table double board Taiwanese 1 million times." : $"{end}ms to deal {hand_cnt + 2} different hands 1 million times.";
      result2 = "Last result:<br>";

      for (int j = 0; j < hand_cnt; j++)
      {
          result2 += deck.CardDescriptions(hands[j]) + "<br>";
          displayHands.Add(new SevenCardHand(hands[j]));
      }

      var board1 = new FiveCardHand(boardMask1);
      var board2 = new FiveCardHand(boardMask2);

      result2 += "Board1: " + board1.CardDescriptions + "<br>";
      result2 += "Board2: " + board2.CardDescriptions + "<br>";
      //displayHands.Add(board1);
      //displayHands.Add(board2);
      result2 += Hand.DescriptionFromMask(Hand.ParseHand(hand_1 ?? "") | boardMask1) + "<br>";
      result2 += "Dealt Cards: " + deck.CardDescriptions(deck.DealtCards) + "<br>";

      return (result, result2);
  }

}
